{"version":3,"file":"app.js","mappings":"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","sources":["webpack://tooling/./src/App/Tooltip.js","webpack://tooling/./src/App/Component.js","webpack://tooling/./src/Utility/DOMHelper.js","webpack://tooling/./src/App/ProjectItem.js","webpack://tooling/./src/App/ProjectList.js","webpack://tooling/./src/app.js"],"sourcesContent":["import Component from './Component';\r\n\r\nexport default class Tooltip extends Component {\r\n  constructor(closeNotifierFunction, text, hostElementId) {\r\n    super(hostElementId);\r\n    this.closeNotifier = closeNotifierFunction;\r\n    this.text = text;\r\n    this.create();\r\n  }\r\n\r\n  closeTooltip = () => {\r\n    this.detach();\r\n    this.closeNotifier();\r\n  };\r\n\r\n  create() {\r\n    const tooltipElement = document.createElement('div');\r\n    tooltipElement.className = 'card';\r\n    const tooltipTemplate = document.getElementById('tooltip');\r\n    const tooltipBody = document.importNode(tooltipTemplate.content, true);\r\n    tooltipBody.querySelector('p').textContent = this.text;\r\n    tooltipElement.append(tooltipBody);\r\n\r\n    const hostElPosLeft = this.hostElement.offsetLeft;\r\n    const hostElPosTop = this.hostElement.offsetTop;\r\n    const hostElHeight = this.hostElement.clientHeight;\r\n    const parentElementScrolling = this.hostElement.parentElement.scrollTop;\r\n\r\n    const x = hostElPosLeft + 20;\r\n    const y = hostElPosTop + hostElHeight - parentElementScrolling - 10;\r\n\r\n    tooltipElement.style.position = 'absolute';\r\n    tooltipElement.style.left = x + 'px'; // 500px\r\n    tooltipElement.style.top = y + 'px';\r\n\r\n    tooltipElement.addEventListener('click', this.closeTooltip);\r\n    this.element = tooltipElement;\r\n  }\r\n}\r\n","export default class Component {\r\n  constructor(hostElementId, insertBefore = false) {\r\n    if (hostElementId) {\r\n      this.hostElement = document.getElementById(hostElementId);\r\n    } else {\r\n      this.hostElement = document.body;\r\n    }\r\n    this.insertBefore = insertBefore;\r\n  }\r\n\r\n  detach() {\r\n    if (this.element) {\r\n      this.element.remove();\r\n      // this.element.parentElement.removeChild(this.element);\r\n    }\r\n  }\r\n\r\n  attach() {\r\n    this.hostElement.insertAdjacentElement(\r\n      this.insertBefore ? 'afterbegin' : 'beforeend',\r\n      this.element\r\n    );\r\n  }\r\n}\r\n","export default class DOMHelper {\r\n  static clearEventListeners(element) {\r\n    const clonedElement = element.cloneNode(true);\r\n    element.replaceWith(clonedElement);\r\n    return clonedElement;\r\n  }\r\n\r\n  static moveElement(elementId, newDestinationSelector) {\r\n    const element = document.getElementById(elementId);\r\n    const destinationElement = document.querySelector(newDestinationSelector);\r\n    destinationElement.append(element);\r\n    element.scrollIntoView({ behavior: 'smooth' });\r\n  }\r\n}\r\n","import Tooltip from './Tooltip';\r\nimport DOMHelper from '../Utility/DOMHelper';\r\n\r\nexport default class ProjectItem {\r\n  hasActiveTooltip = false;\r\n\r\n  constructor(id, updateProjectListsFunction, type) {\r\n    this.id = id;\r\n    this.updateProjectListsHandler = updateProjectListsFunction;\r\n    this.connectMoreInfoButton();\r\n    this.connectSwitchButton(type);\r\n    this.connectDrag();\r\n  }\r\n\r\n  showMoreInfoHandler() {\r\n    if (this.hasActiveTooltip) {\r\n      return;\r\n    }\r\n    const projectElement = document.getElementById(this.id);\r\n    const tooltipText = projectElement.dataset.extraInfo;\r\n    const tooltip = new Tooltip(\r\n      () => {\r\n        this.hasActiveTooltip = false;\r\n      },\r\n      tooltipText,\r\n      this.id\r\n    );\r\n    tooltip.attach();\r\n    this.hasActiveTooltip = true;\r\n  }\r\n\r\n  connectDrag() {\r\n    const item = document.getElementById(this.id);\r\n    item.addEventListener('dragstart', (event) => {\r\n      event.dataTransfer.setData('text/plain', this.id);\r\n      event.dataTransfer.effectAllowed = 'move';\r\n    });\r\n\r\n    item.addEventListener('dragend', (event) => {\r\n      console.log(event);\r\n    });\r\n  }\r\n\r\n  connectMoreInfoButton() {\r\n    const projectItemElement = document.getElementById(this.id);\r\n    const moreInfoBtn = projectItemElement.querySelector(\r\n      'button:first-of-type'\r\n    );\r\n    moreInfoBtn.addEventListener('click', this.showMoreInfoHandler.bind(this));\r\n  }\r\n\r\n  connectSwitchButton(type) {\r\n    const projectItemElement = document.getElementById(this.id);\r\n    let switchBtn = projectItemElement.querySelector('button:last-of-type');\r\n    switchBtn = DOMHelper.clearEventListeners(switchBtn);\r\n    switchBtn.textContent = type === 'active' ? 'Finish' : 'Activate';\r\n    switchBtn.addEventListener(\r\n      'click',\r\n      this.updateProjectListsHandler.bind(null, this.id)\r\n    );\r\n  }\r\n\r\n  update(updateProjectListsFn, type) {\r\n    this.updateProjectListsHandler = updateProjectListsFn;\r\n    this.connectSwitchButton(type);\r\n  }\r\n}\r\n","import ProjectItem from './ProjectItem';\r\nimport DOMHelper from '../Utility/DOMHelper';\r\n\r\nexport default class ProjectList {\r\n  projects = [];\r\n  constructor(type) {\r\n    \r\n    this.type = type;\r\n    const prjItems = document.querySelectorAll(`#${type}-projects li`);\r\n    for (const prjItem of prjItems) {\r\n      this.projects.push(\r\n        new ProjectItem(prjItem.id, this.switchProject.bind(this), this.type)\r\n      );\r\n    }\r\n    console.log(this.projects);\r\n    this.connectDroppable();\r\n  }\r\n\r\n  connectDroppable() {\r\n    const list = document.querySelector(`#${this.type}-projects ul`);\r\n\r\n    list.addEventListener('dragenter', (event) => {\r\n      if (event.dataTransfer.types[0] === 'text/plain') {\r\n        list.parentElement.classList.add('droppable');\r\n        event.preventDefault();\r\n      }\r\n    });\r\n\r\n    list.addEventListener('dragover', (event) => {\r\n      if (event.dataTransfer.types[0] === 'text/plain') {\r\n        event.preventDefault();\r\n      }\r\n    });\r\n\r\n    list.addEventListener('dragleave', (event) => {\r\n      if (event.relatedTarget.closest(`#${this.type}-projects ul`) !== list) {\r\n        list.parentElement.classList.remove('droppable');\r\n      }\r\n    });\r\n\r\n    list.addEventListener('drop', (event) => {\r\n      const prjId = event.dataTransfer.getData('text/plain');\r\n      if (this.projects.find((p) => p.id === prjId)) {\r\n        return;\r\n      }\r\n      document\r\n        .getElementById(prjId)\r\n        .querySelector('button:last-of-type')\r\n        .click();\r\n      list.parentElement.classList.remove('droppable');\r\n      // event.preventDefault(); // not required\r\n    });\r\n  }\r\n\r\n  setSwitchHandlerFunction(switchHandlerFunction) {\r\n    this.switchHandler = switchHandlerFunction;\r\n  }\r\n\r\n  addProject(project) {\r\n    this.projects.push(project);\r\n    DOMHelper.moveElement(project.id, `#${this.type}-projects ul`);\r\n    project.update(this.switchProject.bind(this), this.type);\r\n  }\r\n\r\n  switchProject(projectId) {\r\n    // const projectIndex = this.projects.findIndex(p => p.id === projectId);\r\n    // this.projects.splice(projectIndex, 1);\r\n    this.switchHandler(this.projects.find((p) => p.id === projectId));\r\n    this.projects = this.projects.filter((p) => p.id !== projectId);\r\n  }\r\n}\r\n","import ProjectList from './App/ProjectList';\r\n\r\nclass App {\r\n  static init() {\r\n    console.log('this is the end here');\r\n    const activeProjectsList = new ProjectList('active');\r\n    const finishedProjectsList = new ProjectList('finished');\r\n    activeProjectsList.setSwitchHandlerFunction(\r\n      finishedProjectsList.addProject.bind(finishedProjectsList)\r\n    );\r\n    finishedProjectsList.setSwitchHandlerFunction(\r\n      activeProjectsList.addProject.bind(activeProjectsList)\r\n    );\r\n\r\n    // const timerId = setTimeout(this.startAnalytics, 3000);\r\n\r\n    // document.getElementById('stop-analytics-btn').addEventListener('click', () => {\r\n    //   clearTimeout(timerId);\r\n    // });\r\n  }\r\n\r\n  static startAnalytics() {\r\n    const analyticsScript = document.createElement('script');\r\n    analyticsScript.src = 'assets/scripts/Utility/Analytics.js';\r\n    analyticsScript.defer = true;\r\n    document.head.append(analyticsScript);\r\n  }\r\n}\r\n\r\nApp.init();\r\n"],"names":["Tooltip","constructor","hostElementId","insertBefore","this","hostElement","document","getElementById","body","detach","element","remove","attach","insertAdjacentElement","closeNotifierFunction","text","super","closeNotifier","create","closeTooltip","tooltipElement","createElement","className","tooltipTemplate","tooltipBody","importNode","content","querySelector","textContent","append","x","offsetLeft","y","offsetTop","clientHeight","parentElement","scrollTop","style","position","left","top","addEventListener","DOMHelper","static","clonedElement","cloneNode","replaceWith","elementId","newDestinationSelector","scrollIntoView","behavior","ProjectItem","hasActiveTooltip","id","updateProjectListsFunction","type","updateProjectListsHandler","connectMoreInfoButton","connectSwitchButton","connectDrag","showMoreInfoHandler","tooltipText","dataset","extraInfo","item","event","dataTransfer","setData","effectAllowed","console","log","bind","switchBtn","clearEventListeners","update","updateProjectListsFn","ProjectList","projects","prjItems","querySelectorAll","prjItem","push","switchProject","connectDroppable","list","types","classList","add","preventDefault","relatedTarget","closest","prjId","getData","find","p","click","setSwitchHandlerFunction","switchHandlerFunction","switchHandler","addProject","project","moveElement","projectId","filter","activeProjectsList","finishedProjectsList","analyticsScript","src","defer","head","init"],"sourceRoot":""}